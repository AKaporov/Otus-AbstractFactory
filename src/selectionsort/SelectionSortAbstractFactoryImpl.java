package selectionsort;

/**
 * Created by akaporov on 02.10.2020.
 * <p>
 * <p>
 * Сортировка выбором
 * <p>
 * Сортировка выбором разделяет массив на сортированный и несортированный подмассивы.
 * Но сортированный подмассив формируется вставкой минимального элемента не отсортированного подмассива
 * в конец сортированного, заменой:
 * 3 5 1 2 4
 * 1 5 3 2 4
 * 1 2 3 5 4
 * 1 2 3 5 4
 * 1 2 3 4 5
 * 1 2 3 4 5
 * <p>
 * Реализация:
 * В каждой итерации вы предполагаете, что первый неотсортированный элемент минимален и итерируете по всем оставшимся
 * элементам в поисках меньшего.
 * <p>
 * После нахождения текущего минимума неотсортированной части массива вы меняете его местами с первым элементом, и он
 * уже часть отсортированного массива:
 * <p>
 * Временная сложность:
 * При поиске минимума для длины массива проверяются все элементы, поэтому сложность равна O(n).
 * Поиск минимума для каждого элемента массива равен O(n^2).
 */
public class SelectionSortAbstractFactoryImpl implements SelectionSortAbstractFactory {
    @Override
    public void sort(int[] array) {
        for (int i = 0; i < array.length; i++) {
            int min = array[i];
            int minId = i;
            for (int j = i + 1; j < array.length; j++) {
                if (array[j] < min) {
                    min = array[j];
                    minId = j;
                }
            }
            // замена
            int temp = array[i];
            array[i] = min;
            array[minId] = temp;
        }
    }
}